local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Tenelbacon/tenels-gui/main/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Tenels Script [PUBLIC]",
    LoadingTitle = "Tenels Script",
    LoadingSubtitle = "By TenelBacon",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil,
       FileName = "Big Hub"
    },
    KeySystem = true,
    KeySettings = {
       Title = "Script Hub",
       Subtitle = "Key System",
       Note = "To get key go to discord.gg/9xH4quSVkW",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"default"}
    }
})

local PlayerTab = Window:CreateTab("Player", 4483362458)

local Slider1 = PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "Slider1",
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character
        if character then
            character.Humanoid.WalkSpeed = Value
        end
    end,
})

local Slider3 = PlayerTab:CreateSlider({
    Name = "Jump Height",
    Range = {1, 500},
    Increment = 1,
    Suffix = "Height",
    CurrentValue = 50,
    Flag = "Slider3",
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character
        if character then
            character.Humanoid.JumpPower = Value
        end
    end,
})

local isFlying = false
local isNoClip = false
local bodyVelocity
local bodyGyro
local flyLoop

local Noclip = nil
local Clip = nil

function noclip()
    Clip = false
    local function Nocl()
        if Clip == false and game.Players.LocalPlayer.Character then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
        wait(0.21) -- basic optimization
    end
    Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
    if Noclip then Noclip:Disconnect() end
    Clip = true
end

local function setNoClip(character, state)
    if state then
        noclip()
    else
        clip()
    end
end

local function startFlying(character, noClip)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    humanoid.PlatformStand = true

    bodyVelocity = Instance.new("BodyVelocity", character.PrimaryPart)
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)

    bodyGyro = Instance.new("BodyGyro", character.PrimaryPart)
    bodyGyro.MaxTorque = Vector3.new(4000, 4000, 4000)
    bodyGyro.P = 3000

    local inputService = game:GetService("UserInputService")

    setNoClip(character, noClip)

    flyLoop = RunService.Heartbeat:Connect(function()
        if not isFlying then
            stopFlying()
            return
        end

        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.new()

        if inputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + camera.CFrame.LookVector
        end
        if inputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - camera.CFrame.LookVector
        end
        if inputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - camera.CFrame.RightVector
        end
        if inputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + camera.CFrame.RightVector
        end
        if inputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)
        end
        if inputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection = moveDirection + Vector3.new(0, -1, 0)
        end

        bodyVelocity.Velocity = moveDirection * 50
        bodyGyro.CFrame = CFrame.new(character.PrimaryPart.Position, character.PrimaryPart.Position + camera.CFrame.LookVector)
    end)
end

local function stopFlying()
    isFlying = false
    isNoClip = false
    local character = game.Players.LocalPlayer.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end
    if Noclip then
        Noclip:Disconnect()
        Noclip = nil
    end
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    if bodyGyro then
        bodyGyro:Destroy()
        bodyGyro = nil
    end
    if flyLoop then
        flyLoop:Disconnect()
        flyLoop = nil
    end
end

local function toggleFlying(character, noClip)
    if isFlying then
        stopFlying()
    else
        isFlying = true
        isNoClip = noClip
        startFlying(character, noClip)
    end
end

local ButtonFly = PlayerTab:CreateButton({
    Name = "Fly",
    Description = "Toggle Fly",
    Callback = function()
        local character = game.Players.LocalPlayer.Character
        if character then
            toggleFlying(character, false)
        end
    end
})

local ButtonNoClip = PlayerTab:CreateButton({
    Name = "No Clip",
    Description = "Toggle No Clip Fly",
    Callback = function()
        local character = game.Players.LocalPlayer.Character
        if character then
            toggleFlying(character, true)
        end
    end
})

local ButtonRejoin = PlayerTab:CreateButton({
    Name = "Rejoin",
    Description = "Rejoin the same experience",
    Callback = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
    end
})

Window:Show()
